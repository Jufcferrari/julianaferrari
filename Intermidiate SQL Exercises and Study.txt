CASE STATEMENT:

Case statements are SQL's version of an "IF this THEN that! statement.
Case statements have three parts:

1.WHEN clause

CASE WHEN x=1 
CASE WHEN x=2 

2.THEN clause

THEN 'a'
THEN 'b'

3.ELSE clause
'c' 

END AS new_column

Example:

SELECT id, home_goal, away_goal,
CASE WHEN home_goal > away goal then 'Home team Win'
     WHEN home_goal < away_goal THEN 'Away Team Win'
FROM match
WHERE season = '2013/2014';

---------------------------------------- Exercises

1 - identify matches played between FC Schalke 04 and FC Bayern Munich. There are 2 teams identified in each match in the hometeam_id 
and awayteam_id columns, available to you in the filtered matches_germany table. ID can join to the team_api_id column in the teams_germany table, 
but you cannot perform a join on both at the same time.

However, you can perform this operation using a CASE statement once you've identified the team_api_id associated with each team!

a. Select the team's long name and API id from the teams_germany table.
b. Filter the query for FC Schalke 04 and FC Bayern Munich using IN, giving you the team_api_IDs needed for the next step.

SELECT team_long_name, team_api_id
FROM teams_germany
WHERE team_long_name IN ('FC Schalke 04', 'FC Bayern Munich');

c.Create a CASE statement that identifies whether a match in Germany included FC Bayern Munich, FC Schalke 04, or neither as the home team.
d. Group the query by the CASE statement alias, home_team.


SELECT 
    CASE WHEN hometeam_id = 10189 THEN 'FC Schalke 04'
         WHEN hometeam_id = 9823 THEN 'FC Bayern Munich'
         ELSE 'Other' END AS home_team,
	COUNT(id) AS total_matches
FROM matches_germany
GROUP BY home_team;

------------
2 - Create a list of matches in the 2011/2012 season where Barcelona was the home team. You will do this using a CASE statement that compares the 
values of two columns to create a new group -- wins, losses, and ties.

The matches_spain table currently contains Barcelona's matches from the 2011/2012 season, and has two key columns, hometeam_id and awayteam_id, 
that can be joined with the teams_spain table. However, you can only join teams_spain to one column at a time.


a. Select the date of the match and create a CASE statement to identify matches as home wins, home losses, or ties.

SELECT date,
	CASE WHEN home_goal > away_goal THEN 'Home win!'
         WHEN home_goal < away_goal THEN 'Home loss :(' 
         ELSE 'Tie' END AS outcome
FROM matches_spain;

b.Left join the teams_spain table team_api_id column to the matches_spain table awayteam_id. This allows us to retrieve the away team's identity.
c. Select team_long_name from teams_spain as opponent and complete the CASE statement from Step 1.

SELECT 	m.date,
	t.team_long_name AS opponent, 
	CASE WHEN m.home_goal > m.away_goal THEN 'Home win!'
        WHEN m.home_goal < m. away_goal THEN 'Home loss :('
        ELSE 'Tie' END AS outcome
FROM matches_spain AS m
LEFT JOIN teams_spain AS t
ON m.awayteam_id = t.team_api_id;

d. Complete the same CASE statement as the previous steps.
e. Filter for matches where the home team is FC Barcelona (id = 8634).

SELECT 
	m.date,
	t.team_long_name AS opponent,
	CASE WHEN m.home_goal > away_goal THEN 'Barcelona win!'
        WHEN m.home_goal < away_goal THEN 'Barcelona loss :(' 
        ELSE 'Tie' END  AS outcome 
FROM matches_spain AS m
LEFT JOIN teams_spain AS t 
ON m.awayteam_id = t.team_api_id
WHERE m.hometeam_id = 8634; 

f.Complete the CASE statement to identify Barcelona's away team games (id = 8634) as wins, losses, or ties.
g. Left join the teams_spain table team_api_id column on the matches_spain table hometeam_id column. This retrieves the identity of the home team opponent.
h. Filter the query to only include matches where Barcelona was the away team.




 